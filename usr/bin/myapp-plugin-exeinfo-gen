#!/bin/bash

##############################################
## test env
function exeinfo_test_env(){
	# these env should be passed to this script
	cat << EOF
[myapp-exeinfo-plugin-gen]: test env
required:
APPDIR=$APPDIR
APPIMAGE_CACHE_DIR=$APPIMAGE_CACHE_DIR
EXEINFO_GEN_METHOD=$EXEINFO_GEN_METHOD

optional:
MYAPPDEBUG=$MYAPPDEBUG
EXE_LDIR=$EXE_LDIR
EXE_WROOT=$EXE_WROOT
EXE_WDIR=$EXE_WDIR
EXENAME=$EXENAME
SAVEDATA_IN_HOME=$SAVEDATA_IN_HOME
SAVEDATA_DIR=$SAVEDATA_DIR
MYAPPLANG=$MYAPPLANG
EOF
}
##############################################



##############################################
function apprun_realpath(){
	# both $1 and $2 are absolute paths beginning with /
	# returns relative path to $2/$target from $1/$source
	source=${1%/}
	target=${2%/}	# remove the "/" character at the end
	
	if [[ -z $1 || -z $2 ]];
	then
		echo "[apprun_realpath] error: please inpute two variables." >&2
		exit 1
	fi
	
	common_part=$source # for now
	result="" # for now
	
	while [[ "${target#"$common_part"}" == "$target" ]]; do
	    # no match, means that candidate common part is not correct
	    # go up one level (reduce common part)
	    common_part="$(dirname "$common_part")"
	    # and record that we went back, with correct / handling
	    if [[ -z $result ]]; then
	        result=".."
	    else
	        result="../$result"
	    fi
	done

	if [[ $common_part == "/" ]]; then
	    # special case for root (no common path)
	    result="$result/"
	fi

	# since we now have identified the common part,
	# compute the non-common part
	forward_part="${target#"$common_part"}"
	
	# and now stick all parts together
	if [[ -n $result ]] && [[ -n $forward_part ]]; then
	    result="$result$forward_part"
	elif [[ -n $forward_part ]]; then
	    # extra slash removal
	    result="${forward_part:1}"
	fi
	
	echo "$result"

}

function exeinfo_load_env(){
	TEMP_EXE_LDIR=$EXE_LDIR
	TEMP_EXE_WROOT=$EXE_WROOT
	TEMP_EXE_WDIR=$EXE_WDIR
	TEMP_EXENAME=$EXENAME
	TEMP_SAVEDATA_IN_HOME=$SAVEDATA_IN_HOME
	TEMP_SAVEDATA_DIR=$SAVEDATA_DIR
	TEMP_MYAPPLANG=$TEMP_MYAPPLANG
}

function exeinfo_test_gui(){
	if [[ $EXEINFO_GEN_METHOD == "kdialog" ]];
	then
		[[ $(command -v kdialog) ]] && return || EXIT_MAIN_MENU=1
	elif [[ $EXEINFO_GEN_METHOD == "zenity" ]];
	then
		[[ $(command -v zenity) ]] && return || EXIT_MAIN_MENU=1
	elif [[ $EXEINFO_GEN_METHOD == "gui" ]];
	then
		if [[ $(command -v zenity) ]];
		then
			EXEINFO_GEN_METHOD="zenity"
			return
		elif [[ $(command -v kdialog) ]];
		then
			EXEINFO_GEN_METHOD="kdialog"
			return
		else
			EXIT_MAIN_MENU=1
		fi
	elif [[ $EXEINFO_GEN_METHOD == "cli" ]];
	then
		return
	else
		echo "unknow option $EXEINFO_GEN_METHOD" >&2
		EXIT_MAIN_MENU=1
	fi

	# fallback solution
	# launch from commandline but fail to find gui: go to CLI mode.
	# launch by double click but fail to find gui: exit directly.
	if [[ -t 0 ]];
	then
		echo "cannot find $EXEINFO_GEN_METHOD, using commandline to read input."
		EXEINFO_GEN_METHOD="cli"
		EXIT_MAIN_MENU=0
	else
		notify-send --app-name "AppRun" --expire-time 15000 "AppRun:plugin-exeinfo error" "$EXEINFO_GEN_METHOD not found, cannot run exeinfo-gen. Please install [kdialog] or [zenity]. Otherwise you can run in commandline with --exeinfo-gen=cli option to enter exeinfo-gen."
		EXIT_MAIN_MENU=1
	fi

}

function exeinfo_main_menu(){
	if [[ $EXEINFO_GEN_METHOD == "kdialog" ]];
	then
		MENU_SELECT_ITEM=$(kdialog --geometry 1000x600 --title "exe info setting" --menu "select one of items to go" \
			1 "1. set exe file location($TEMP_EXENAME)" \
			2 "2. set savedata directory location($TEMP_SAVEDATA_DIR)" \
			3 "3. set \$LANG for this game($TEMP_MYAPPLANG)" \
			4 "4. ***write into exeinfo_profile" \
			5 "5. ***cancel and exit without saving into exeinfo_profile" \
			--ok-label "go" --cancel-label "close")
		# result:
		# $? return 0: click ok, also echo item tag(1/2/3/4/5)
		# $? return 1: click cancel
		[[ $? -eq 1 ]] && MENU_SELECT_ITEM=5
	elif [[ $EXEINFO_GEN_METHOD == "zenity" ]];
	then
		MENU_SELECT_ITEM=$(zenity --width=1000 --height=600 --list --title="exe info setting" \
			--ok-label="go" --cancel-label="close" \
			--text="select one of items to go" \
			--column="item" --column="action" \
			"1" "set exe file location($TEMP_EXENAME)" \
			"2" "set savedata directory location($TEMP_SAVEDATA_DIR)" \
			"3" "set \$LANG for this game($TEMP_MYAPPLANG)" \
			"4" "***write into exeinfo_profile" \
			"5" "***cancel and exit without saving into exeinfo_profile")
		# result:
		# $? return 0: click ok, also echo item tag(1/2/3/4/5)
		# $? return 1: click cancel
		[[ $? -eq 1 ]] && MENU_SELECT_ITEM=5
	elif [[ $EXEINFO_GEN_METHOD == "cli" ]];
	then
		while true; do
			cat << EOF
##################################################
  current EXENAME=$TEMP_EXENAME
  current SAVEDATA_DIR=$TEMP_SAVEDATA_DIR
  current MYAPPLANG=$TEMP_MYAPPLANG
##################################################
  please select one of below items:
  1. set .exe file location
  2. set savedata directory location
  3. set \$LANG for this game
  4. ***write into exeinfo_profile then exit
  5. ***cancel and exit without saving into exeinfo_profile
##################################################
EOF
			read -p "select item (1/2/3/4/5):" MENU_SELECT_ITEM
			case "$MENU_SELECT_ITEM" in
				1| 2| 3| 4| 5)
					break
					;;
				*)
					clear
					echo "invalid number. please input again!"
					;;
			esac
		done
	fi
}

function exeinfo_exe_location(){
	if [[ $EXEINFO_GEN_METHOD == "kdialog" ]];
	then
		TEMP_EXEPATH="$(kdialog --geometry 1000x600 --title "select the .exe file" --getopenfilename "$APPIMAGE_CACHE_DIR/usr/share" )"
		RETURN_STATUS="$?"
	elif [[ $EXEINFO_GEN_METHOD == "zenity" ]];
	then
		TEMP_EXEPATH="$(zenity --width=1000 --height=600 --file-selection --title="select the .exe file" --filename="$APPIMAGE_CACHE_DIR/usr/share" )"
		RETURN_STATUS="$?"
	else
		clear
		echo "  to go back to previous menu, please <backspace> to earse all words then push <enter>"
		echo ""
		echo ""
		echo "##################################################"
		echo "  select .exe file location(use <tab> key for prompt)"
		echo "  it should be under"
		echo "  (cache dir:) $APPIMAGE_CACHE_DIR/usr/share/"
		echo "  or"
		echo "  (app dir:) ${APPDIR}/usr/share/"
		echo "##################################################"
		echo ""
		read -e -p "input .exe file path: " -i "$APPIMAGE_CACHE_DIR" TEMP_EXEPATH
		RETURN_STATUS="$?"
		TEMP_EXEPATH="$(readlink -f "$TEMP_EXEPATH")"
		if [[ -z "$TEMP_EXEPATH" ]];
		then
			clear
			return
		elif [[ ! -f "$TEMP_EXEPATH" ]];
		then
			clear
			echo "########################################"
			echo "invalid file name: $TEMP_EXEPATH"
			echo "########################################"
			echo ""
			TEMP_EXEPATH=""
			return
		fi
	fi

	clear
	# if clicked "ok"
	if [[ $RETURN_STATUS -eq 0 && -n $TEMP_EXEPATH ]];
	then
		# check if .exe file in appdir or in appdir.cache
		if [[ "${TEMP_EXEPATH#"$APPIMAGE_CACHE_DIR/usr/share"}" != "$TEMP_EXEPATH" ]];
		then
			TEMP_EXE_LROOT=${APPIMAGE_CACHE_DIR}/usr/share	# .exe file in AppDir.cache or in *.appimage.cache directory
		elif [[ "${TEMP_EXEPATH#"$APPDIR/usr/share"}" != "$TEMP_EXEPATH" ]];
		then
			TEMP_EXE_LROOT=$APPDIR/usr/share	# .exe file in AppDir, running AppRun directly from AppDir at this moment.
		else
			[[ $EXEINFO_GEN_METHOD == "kdialog" ]] && kdialog --error "you selected *.exe file outside of appimage dir."
			[[ $EXEINFO_GEN_METHOD == "zenity" ]] && zenity --error --text="you selected *.exe file outside of appimage dir."
			clear
			echo "########################################"
			echo "ERROR: .exe file outside of appimage dir." >&2	# outside of AppDir and *.cache. Should not install .exe outside of AppDir or *.cache.
			echo "########################################"
			echo ""
			TEMP_EXEPATH=""
			return
		fi

		TEMP="$(dirname "$TEMP_EXEPATH")"
		TEMP_END=""
		while [[ -n $TEMP && $TEMP != "/" ]] ; do
			case "$(basename "$TEMP")" in
				drive_d)
					export TEMP_EXE_WROOT="d"
					#EXE_WDIR=$(apprun_realpath "$MNT_ALLWINESTORGE/drive_d" "$(dirname $TEMP_EXEPATH)")
					TEMP_EXE_WDIR="$TEMP_END"
					break
					;;
				drive_c)
					export TEMP_EXE_WROOT="c"
					#EXE_WDIR=$(apprun_realpath "$MNT_ALLWINESTORGE/$WINEARCH/drive_c" "$(dirname $TEMP_EXEPATH)")
					TEMP_EXE_WDIR="$TEMP_END"
					break
					;;
				*)
					TEMP_END="$(basename "$TEMP")"'\\'"$TEMP_END"
					TEMP=$(dirname "$TEMP")
					;;
			esac
		done
		TEMP_EXE_WDIR=${TEMP_END%'\\'}
	fi
	[[ -n $TEMP_EXE_LROOT && -n $TEMP_EXEPATH ]] && TEMP_EXE_LDIR=$(apprun_realpath "$TEMP_EXE_LROOT" "$(dirname "$TEMP_EXEPATH")")
	[[ -n $TEMP_EXEPATH ]] && TEMP_EXENAME=$(basename "$TEMP_EXEPATH")
	unset TEMP
	unset TEMP_END
	unset TEMP_EXEPATH
	unset TEMP_EXE_LROOT
	unset RETURN_STATUS
}


function exeinfo_savedata_location(){
	if [[ $EXEINFO_GEN_METHOD == "kdialog" ]];
	then
		TEMP_SAVEDATAPATH=$(kdialog --geometry 1000x600 --title "select the directory where to save the savedata files" --getexistingdirectory "$APPIMAGE_CACHE_DIR/usr/share" )
		RETURN_STATUS="$?"
	elif [[ $EXEINFO_GEN_METHOD == "zenity" ]];
	then
		TEMP_SAVEDATAPATH="$(zenity --width=1000 --height=600 --file-selection --directory --title="select the directory where to save the savedata files" --filename="$APPIMAGE_CACHE_DIR/usr/share" )"
		RETURN_STATUS="$?"
	else
		clear
		echo "  to go back to previous menu, please <backspace> to earse all words then push <enter>"
		echo ""
		echo ""
		echo "##################################################"
		echo "  select savedata directory location(use <tab> key for prompt)"
		echo "  it should be under:"
		echo "  (game folder under cache dir:) ${APPIMAGE_CACHE_DIR}/usr/share/"
		echo "  or"
		echo "  (game folder under app dir:) ${APPDIR}/usr/share/"
		echo "  or"
		echo "  (fake home:) ${APPIMAGE_CACHE_DIR}/home/public_user/"
		echo "##################################################"
		echo ""
		read -e -p "input savedata directory path: " -i "$APPIMAGE_CACHE_DIR" TEMP_SAVEDATAPATH
		RETURN_STATUS="$?"
		TEMP_SAVEDATAPATH="$(readlink -f "$TEMP_SAVEDATAPATH")"
		if [[ ! -d "$TEMP_SAVEDATAPATH" ]];
		then
			clear
			echo "########################################"
			echo "invalid directory name: $TEMP_SAVEDATAPATH"
			echo "########################################"
			echo ""
			TEMP_SAVEDATAPATH=""
			return
		fi
	fi

	clear
	if [[ $RETURN_STATUS -eq 0 && -n $TEMP_SAVEDATAPATH ]];
	then
		if [[ "${TEMP_SAVEDATAPATH#"${APPIMAGE_CACHE_DIR}/usr/share"}" != "$TEMP_SAVEDATAPATH" ]];
		then
			TEMP_SAVEDATA_IN_HOME=0
			TEMP_SAVEDATA_DIR=$(apprun_realpath "${APPIMAGE_CACHE_DIR}/usr/share" "$TEMP_SAVEDATAPATH")
		elif [[ "${TEMP_SAVEDATAPATH#"${APPDIR}/usr/share"}" != "$TEMP_SAVEDATAPATH" ]];
		then
			TEMP_SAVEDATA_IN_HOME=0
			TEMP_SAVEDATA_DIR=$(apprun_realpath "${APPDIR}/usr/share" "$TEMP_SAVEDATAPATH")
		elif [[ "${TEMP_SAVEDATAPATH#"${APPIMAGE_CACHE_DIR}/home/public_user"}" != "$TEMP_SAVEDATAPATH" ]];
		then
			TEMP_SAVEDATA_IN_HOME=1
			TEMP_SAVEDATA_DIR=$(apprun_realpath "${APPIMAGE_CACHE_DIR}/home/public_user" "$TEMP_SAVEDATAPATH")
		elif [[ "${TEMP_SAVEDATAPATH#"${APPDIR}/home/public_user"}" != "$TEMP_SAVEDATAPATH" ]];
		then
			TEMP_SAVEDATA_IN_HOME=1
			TEMP_SAVEDATA_DIR=$(apprun_realpath "${APPDIR}/home/public_user" "$TEMP_SAVEDATAPATH")
		else
			[[ $EXEINFO_GEN_METHOD == "kdialog" ]] && kdialog --error "you selected savedata directory outside of appimage dir."
			[[ $EXEINFO_GEN_METHOD == "zenity" ]] && zenity --error --text="you selected savedata directory outside of appimage dir."
			echo "########################################"
			echo "ERROR: savedata directory outside of appimage dir."	# outside of AppDir and *.appimage.
			echo "########################################"
			echo ""
			TEMP_SAVEDATAPATH=""
		fi
	fi
	unset RETURN_STATUS
	unset TEMP_SAVEDATAPATH
}

function exeinfo_locale(){
	if [[ $EXEINFO_GEN_METHOD == "kdialog" ]];
	then
		TEMP_LANG=$(kdialog --geometry 1000x600 --inputbox \
"set \$LANG for this game:
supported locale in current system:

$(localectl list-locales)

you can only choose one of above items to setup.
because if you cannot find your language in this list,
that means you cannot use this language setting to run this game.
if you cannot find your language in this list,
please use locale-gen to generate locale setting first." "$LANG")
		RETURN_STATUS="$?"
	elif [[ $EXEINFO_GEN_METHOD == "zenity" ]];
	then
		# TODO: zenity --text option ignore underscore"_" output. I used whitespace" " to replace underscore"_" at this moment.
		TEMP_LANG=$(zenity --entry --text=\
" \
set \$LANG for this game:\n \
supported locale in current system:\n \
\n\
$(localectl list-locales| sed -e 's/_/ /')
\n \
you can only choose one of above items to setup.\n \
because if you cannot find your language in this list,\n \
that means you cannot use this language setting to run this game.\n \
if you cannot find your language in this list,\n \
please use locale-gen to generate locale setting first.\n" --entry-text="$LANG")
		RETURN_STATUS=$?
	else
		clear
		echo "  to go back to previous menu, please <backspace> to earse all words then push <enter>"
		echo ""
		echo ""
		echo "##################################################"
		echo "  set \$LANG for this game:"
		echo "  supported locale in current system:"
		echo ""
		localectl list-locales
		echo ""
		echo "  you can only choose one of above items to setup."
		echo "  because if you cannot find your language in this list,"
		echo "  that means you cannot use this language setting to run this game."
		echo "  if you cannot find your language in this list,"
		echo "  please use locale-gen to generate locale setting first."
		echo "##################################################"
		echo ""
		read -p "set MYAPPLANG=: " -i "$LANG" TEMP_LANG
		RETURN_STATUS="$?"
	fi

	clear
	if [[ $RETURN_STATUS -eq 0 && -n $TEMP_LANG ]];
	then
		if (localectl list-locales| grep "$TEMP_LANG" -x --quiet 2>/dev/null );
		then
			TEMP_MYAPPLANG=$TEMP_LANG
		else	
			echo "########################################"
			echo "ERROR: unsupport MYAPPLANG: $TEMP_LANG"
			echo "########################################"
			echo ""
		fi
	fi
	unset TEMP_LANG
	unset RETURN_STATUS
}

function exeinfo_write_file(){
	if [[ $EXEINFO_GEN_METHOD == "kdialog" ]];
	then
		kdialog --geometry 1000x600 --warningcontinuecancel \
"old:
EXE_LDIR=\"$EXE_LDIR\"
EXE_WROOT=\"$EXE_WROOT\"
EXE_WDIR=\"$EXE_WDIR\"
EXENAME=\"$EXENAME\"
SAVEDATA_IN_HOME=\"$SAVEDATA_IN_HOME\"
SAVEDATA_DIR=\"$SAVEDATA_DIR\"
MYAPPLANG=\"$MYAPPLANG\"

new:
EXE_LDIR=\"$TEMP_EXE_LDIR\"
EXE_WROOT=\"$TEMP_EXE_WROOT\"
EXE_WDIR=\"$TEMP_EXE_WDIR\"
EXENAME=\"$TEMP_EXENAME\"
SAVEDATA_IN_HOME=\"$TEMP_SAVEDATA_IN_HOME\"
SAVEDATA_DIR=\"$TEMP_SAVEDATA_DIR\"
MYAPPLANG=\"$TEMP_MYAPPLANG\"

write into exeinfo_profile?
"
		RETURN_NUMBER=$?
	elif [[ $EXEINFO_GEN_METHOD == "zenity" ]];
	then
		zenity --question --ok-label="continue" --text=\
" \
old:\n \
EXE_LDIR=\"$EXE_LDIR\"\n \
EXE_WROOT=\"$EXE_WROOT\"\n \
EXE_WDIR=\"$EXE_WDIR\"\n \
EXENAME=\"$EXENAME\"\n \
SAVEDATA_IN_HOME=\"$SAVEDATA_IN_HOME\"\n \
SAVEDATA_DIR=\"$SAVEDATA_DIR\"\n \
MYAPPLANG=\"$MYAPPLANG\"\n \
\n \
new:\n \
EXE_LDIR=\"$TEMP_EXE_LDIR\"\n \
EXE_WROOT=\"$TEMP_EXE_WROOT\"\n \
EXE_WDIR=\"$TEMP_EXE_WDIR\"\n \
EXENAME=\"$TEMP_EXENAME\"\n \
SAVEDATA_IN_HOME=\"$TEMP_SAVEDATA_IN_HOME\"\n \
SAVEDATA_DIR=\"$TEMP_SAVEDATA_DIR\"\n \
MYAPPLANG=\"$TEMP_MYAPPLANG\"\n \
\n \
write into exeinfo_profile?\n"
		RETURN_NUMBER=$?
	elif [[ $EXEINFO_GEN_METHOD == "cli" ]];
	then
		while true; do
			clear
			cat << EOF
old:
EXE_LDIR="$EXE_LDIR"
EXE_WROOT="$EXE_WROOT"
EXE_WDIR="$EXE_WDIR"
EXENAME="$EXENAME"
SAVEDATA_IN_HOME="$SAVEDATA_IN_HOME"
SAVEDATA_DIR="$SAVEDATA_DIR"

new:
EXE_LDIR="$TEMP_EXE_LDIR"
EXE_WROOT="$TEMP_EXE_WROOT"
EXE_WDIR="$TEMP_EXE_WDIR"
EXENAME="$TEMP_EXENAME"
SAVEDATA_IN_HOME="$TEMP_SAVEDATA_IN_HOME"
SAVEDATA_DIR="$TEMP_SAVEDATA_DIR"

EOF
			read -p "write into exeinfo_profile?(y/n): " RETURN_NUMBER
			case $RETURN_NUMBER in
				y| Y| yes| YES)
					RETURN_NUMBER=0
					break
					;;
				n| N| no| NO)
					RETURN_NUMBER=1
					break
					;;
				*)
					;;
			esac
		done
	else
		return
	fi

	if [[ ! $RETURN_NUMBER -eq 0 ]];
	then
		RETURN_NUMBER=""
		clear
		return
	fi
	mkdir -p "$APPIMAGE_CACHE_DIR/usr/share/drive_d/myapp_exeinfo"
	cat << EOF > "$APPIMAGE_CACHE_DIR/usr/share/drive_d/myapp_exeinfo/exeinfo_profile"
EXE_LDIR="$TEMP_EXE_LDIR"
EXE_WROOT="$TEMP_EXE_WROOT"
EXE_WDIR="$TEMP_EXE_WDIR"
EXENAME="$TEMP_EXENAME"
SAVEDATA_IN_HOME="$TEMP_SAVEDATA_IN_HOME"
SAVEDATA_DIR="$TEMP_SAVEDATA_DIR"
MYAPPLANG="$TEMP_MYAPPLANG"
EOF
	echo "saved into $APPIMAGE_CACHE_DIR/usr/share/drive_d/myapp_exeinfo/exeinfo_profile"
	cat "$APPIMAGE_CACHE_DIR/usr/share/drive_d/myapp_exeinfo/exeinfo_profile" > "$APPIMAGE_CACHE_DIR/usr/share/drive_d/myapp_exeinfo/exeinfo_profile.$TEMP_MYAPPLANG"
	echo "saved into $APPIMAGE_CACHE_DIR/usr/share/drive_d/myapp_exeinfo/exeinfo_profile.$TEMP_MYAPPLANG"
	EXIT_MAIN_MENU=1

}

function exeinfo_confirm_exit(){
	if [[ "$EXEINFO_GEN_METHOD" == "kdialog" ]];
	then
		kdialog --yesno "exit exeinfo setting?"
		RETURN_NUMBER=$?
	elif [[ "$EXEINFO_GEN_METHOD" == "zenity" ]];
	then
		zenity --question --text="exit exeinfo setting?"
		RETURN_NUMBER=$?
	elif [[ "$EXEINFO_GEN_METHOD" == "cli" ]];
	then
		while true; do
			read -p "exit exeinfo setting?(y/n): " RETURN_NUMBER
			case "$RETURN_NUMBER" in
				y| Y| yes| YES)
					RETURN_NUMBER=0
					break
					;;
				n| N| no| NO)
					RETURN_NUMBER=1
					break
					;;
				*)
					;;
			esac
		done
	else
		return
	fi

	if [[ $RETURN_NUMBER -eq 0 ]];
	then
		EXIT_MAIN_MENU=1
	elif [[ $RETURN_NUMBER -eq 1 ]];
	then
		clear
		return
	else
		echo "[AppRun_exeinfo_gen:exeinfo_confirm_exit] unknow error"
		EXIT_MAIN_MENU=1
	fi
}

function exeinfo_main(){
	clear
	exeinfo_load_env
	exeinfo_test_gui
	EXIT_MAIN_MENU=0
	while [[ $EXIT_MAIN_MENU -eq 0 ]];do
		exeinfo_main_menu
		clear
		if [[ $MENU_SELECT_ITEM -eq 1 ]];
		then 
			exeinfo_exe_location
		elif [[ $MENU_SELECT_ITEM -eq 2 ]];
		then
			exeinfo_savedata_location
		elif [[ $MENU_SELECT_ITEM -eq 3 ]];
		then
			exeinfo_locale
		elif [[ $MENU_SELECT_ITEM -eq 4 ]];
		then
			exeinfo_write_file
		elif [[ $MENU_SELECT_ITEM -eq 5 ]];
		then
			exeinfo_confirm_exit
		else
			echo "[AppRun:plugin_exeinfo] unknown \$MENU_SELECT_ITEM=$MENU_SELECT_ITEM"
			EXIT_MAIN_MENU=1
		fi
	done
}

[[ "$0" == "${BASH_SOURCE[0]}" && $MYAPPDEBUG -eq 1 ]] && exeinfo_test_env
if [[ "$0" == "${BASH_SOURCE[0]}" ]];
then
	[[ -n $APPDIR ]] || echo "[AppRun:plugin_exeinfo] required \$APPDIR but it was not set"
	[[ -n $APPIMAGE_CACHE_DIR ]] || echo "[AppRun:plugin_exeinfo] required \$APPIMAGE_CACHE_DIR but it was not set"
	[[ -n $EXEINFO_GEN_METHOD ]] || echo "[AppRun:plugin_exeinfo] required \$EXEINFO_GEN_METHOD but it was not set"
	[[ -n $APPDIR || -n $APPIMAGE_CACHE_DIR || -n $EXEINFO_GEN_METHOD ]] || return
	exeinfo_main
fi

##############################################



