#!/bin/bash

##############################################
## test env
function wine_test_env(){
	# these env should be passed to this script
	cat << EOF
[myapp-exeinfo-plugin-gen]: test env
required:
APPDIR=$APPDIR
APPIMAGE_CACHE_DIR=$APPIMAGE_CACHE_DIR
EXEINFO_GEN_METHOD=$EXEINFO_GEN_METHOD

optional:
MYAPPDEBUG=$MYAPPDEBUG
EXE_LDIR=$EXE_LDIR
EXE_WROOT=$EXE_WROOT
EXE_WDIR=$EXE_WDIR
EXENAME=$EXENAME
SAVEDATA_IN_HOME=$SAVEDATA_IN_HOME
SAVEDATA_DIR=$SAVEDATA_DIR
MYAPPLANG=$MYAPPLANG
EOF
}
##############################################


##############################################
function wine_search_proton(){
	PROTON_DIR_FROM_HOME=""
	SEARCH_COMPAT_CLIENT_PATH=".steam/steam"
	while read -d $'\0' PROTON_DIR;
	do
		if [[ -x "$PROTON_DIR"/proton ]];
		then
			# must use readlink to convert the path, otherwise if directly pass the path including symlink, some local files(such as default_pfx) maybe delete at below function.
			SEARCH_COMPAT_CLIENT_PATH="$(readlink -f "$HOME/$SEARCH_COMPAT_CLIENT_PATH")"
			SEARCH_COMPAT_CLIENT_PATH="${SEARCH_COMPAT_CLIENT_PATH#"$HOME/"}"

			PROTON_DIR_FROM_HOME="$SEARCH_COMPAT_CLIENT_PATH/steamapps/common/$(basename "$PROTON_DIR")"
			break
		fi
	done < <(find "$HOME/$SEARCH_COMPAT_CLIENT_PATH/steamapps/common" -mindepth 1 -maxdepth 1 -name "Proton*" ! -name "Proton - Experimental" -print0 | sort -zr)

	if [[ -n $PROTON_DIR_FROM_HOME ]];
	then
		echo "found ~/$PROTON_DIR_FROM_HOME"
		return
	fi

	SEARCH_COMPAT_CLIENT_PATH=".local/share/Steam"
	while read -d $'\0' PROTON_DIR;
	do
		if [[ -x "$PROTON_DIR"/proton ]];
		then
			# must use readlink to convert the path, otherwise if directly pass the path including symlink, some local files(such as default_pfx) maybe delete at below function.
			SEARCH_COMPAT_CLIENT_PATH="$(readlink -f "$HOME/$SEARCH_COMPAT_CLIENT_PATH")"
			SEARCH_COMPAT_CLIENT_PATH="${SEARCH_COMPAT_CLIENT_PATH#"$HOME/"}"

			PROTON_DIR_FROM_HOME="$SEARCH_COMPAT_CLIENT_PATH/steamapps/common/$(basename "$PROTON_DIR")"
			break
		fi
	done < <(find "$HOME/$SEARCH_COMPAT_CLIENT_PATH/steamapps/common" -mindepth 1 -maxdepth 1 -name "Proton*" ! -name "Proton - Experimental" -print0 | sort -zr)

	if [[ -n $PROTON_DIR_FROM_HOME ]];
	then
		echo "found ~/$PROTON_DIR_FROM_HOME"
		return
	elif [[ -x "$HOME/.steam/steam/steamapps/common/Proton - Experimental/proton" ]];
	then
		# must use readlink to convert the path, otherwise if directly pass the path including symlink, some local files(such as default_pfx) maybe delete at below function.
		SEARCH_COMPAT_CLIENT_PATH="$(readlink -f "$HOME/.steam/steam")"
		SEARCH_COMPAT_CLIENT_PATH="${SEARCH_COMPAT_CLIENT_PATH#"$HOME/"}"

		PROTON_DIR_FROM_HOME="$SEARCH_COMPAT_CLIENT_PATH/steamapps/common/Proton - Experimental"
		echo "found ~/$PROTON_DIR_FROM_HOME"
		return
	elif [[ -x "$HOME/.local/share/Steam/steamapps/common/Proton - Experimental/proton" ]];
	then
		# must use readlink to convert the path, otherwise if directly pass the path including symlink, some local files(such as default_pfx) maybe delete at below function.
		SEARCH_COMPAT_CLIENT_PATH="$(readlink -f "$HOME/.local/share/Steam")"
		SEARCH_COMPAT_CLIENT_PATH="${SEARCH_COMPAT_CLIENT_PATH#"$HOME/"}"

		PROTON_DIR_FROM_HOME="$SEARCH_COMPAT_CLIENT_PATH/steamapps/common/Proton - Experimental"
		echo "found ~/$PROTON_DIR_FROM_HOME"
		return
	else
		unset SEARCH_COMPAT_CLIENT_PATH
		echo "[myapp-plugin-proton] ERROR: Proton not found" >&2
		exit
	fi
}
##############################################


##############################################
## setup WINE env
function wine_set_env(){
	# default to run win64
	if [[ "$WINEARCH" == "win32" || $(getconf LONG_BIT) -eq 32 ]];
	then
		# disable proton 32 bit, because I failed to find a method to setup 32 bit proton prefix at this moment.
		echo "[myapp-plugin-proton] ERROR: not support 32 bit proton setting at this moment."
		exit

		export WINEARCH=win32
	else
		export WINEARCH=win64
	fi

	# default to prevent wine showing "fixeme" message.
	if [[ -z $WINEDEBUG ]];
	then
		export WINEDEBUG=-all
	fi

	# prevent wine setup application menuï¼Œno confirm if this setting was effected or not
	export WINEDLLOVERRIDES=winemenubuilder.exe=d

	wine_search_proton
}
##############################################


##############################################
## restore wine prefix, should only run this function after unionfs is mounted, because $WINEPREFIX path include the unionfs drive
function wine_restore_prefix(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "run wine_restore_prefix"
	[[ -z "$MNT_ALLWINESTORGE" ]] && echo "[wine_restore_prefix]:\$MNT_ALLWINESTORGE not set" >&2 && exit
	#if [[ "$WINEARCH" == "win32" ]];
	#then
	#	[[ ! -x "$HOME/$PROTON_DIR_FROM_HOME/temprun.win32.proton" ]] && cat "$HOME/$PROTON_DIR_FROM_HOME/proton" | sed 's/wine64/wine/g' > "$HOME/$PROTON_DIR_FROM_HOME/temprun.win32.proton"
	#	chmod u+x "$HOME/$PROTON_DIR_FROM_HOME/temprun.win32.proton"
	#else
	#	[[ ! -x "$HOME/$PROTON_DIR_FROM_HOME/temprun.win64.proton" ]] && cp "$HOME/$PROTON_DIR_FROM_HOME/proton" "$HOME/$PROTON_DIR_FROM_HOME/temprun.win64.proton"
	#fi

	#if [[ "$(grep "#arch=" "$HOME/$PROTON_DIR_FROM_HOME/dist/share/default_pfx/userdef.reg")" != "#arch=$WINEARCH" ]];
	#then
	#	echo "reset proton default_pfx to $WINEARCH"
	#	rm -rf "$HOME/$PROTON_DIR_FROM_HOME/dist/share/default_pfx"
	#fi

	export STEAM_COMPAT_CLIENT_INSTALL_PATH="$HOME/$SEARCH_COMPAT_CLIENT_PATH"
	export PATH="$HOME/$PROTON_DIR_FROM_HOME/dist/bin/:$PATH"
	export STEAM_COMPAT_DATA_PATH="$MNT_ALLWINESTORGE/myapp_prefix/proton.$WINEARCH"
	# not necessary to set WINEPREFIX because proton uses $STEAM_COMPAT_DATA_PATH/pfx to decide the WINEPREFIX directory
	# however, we still set the WINEPREFIX because below lines need $WINEPREFIX
	export WINEPREFIX="$MNT_ALLWINESTORGE/myapp_prefix/proton.$WINEARCH/pfx"

	# "rm -rf" included, must check $WINEPREFIX first
	#[[ -z "$WINEPREFIX" ]] && echo "[myapp:wine_restore_prefix] ERROR:\$WINEPREFIX not set, could not restore wine prefix." >&2 && return

	mkdir -p "$MNT_ALLWINESTORGE/myapp_prefix/proton.$WINEARCH"

	# only setup wineprefix and do nothing
	if [[ $MYAPPDEBUG -eq 1 ]];
	then
		#[[ ! -d $WINEPREFIX ]] && "$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" cmd /C exit
		[[ ! -d $WINEPREFIX ]] && "$HOME/$PROTON_DIR_FROM_HOME/proton" cmd /C exit
	else
		#[[ ! -d $WINEPREFIX ]] && "$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" cmd /C exit >/dev/null 2>&1
		[[ ! -d $WINEPREFIX ]] && "$HOME/$PROTON_DIR_FROM_HOME/proton" cmd /C exit >/dev/null 2>&1
	fi

	# for test, not run this line in proton mode
	#echo "disable" > "$WINEPREFIX/.update-timestamp"

	# in proton, also keep y: drive, which is winetricks cache. otherwise it would keep asking you to install mono
	# TODO: seems not the problem of y: drive. but why wine keep asking to install mono?
	find "$WINEPREFIX/dosdevices" -mindepth 1 -maxdepth 1 ! -name "c:" ! -name "d:" ! -name "y:" -exec rm -rf "{}" \;
	[[ ! -L "$WINEPREFIX/dosdevices/c:" ]] && ln -sfn ../drive_c "$WINEPREFIX/dosdevices/c:"
	[[ ! -L "$WINEPREFIX/dosdevices/d:" ]] && ln -sfn ../../../drive_d "$WINEPREFIX/dosdevices/d:"
	[[ ! -L "$MNT_ALLWINESTORGE/drive_d/myapp_patch_reg" ]] && ln -sfn ../../../../myapp_patch_reg "$WINEPREFIX/drive_c/myapp_patch_reg"
	if [[ ! -L "$WINEPREFIX/drive_c/windows/Fonts" ]];
	then
		rm -rf "$WINEPREFIX/drive_c/windows/Fonts"
		#refer path: .../myapp/myapp_fonts
		#refer path: .../myapp/myapp_prefix/wine.wine64/pfx/drive_c/windows/Fonts
		ln -sfnv ../../../../../myapp_fonts "$WINEPREFIX/drive_c/windows/Fonts"
	fi
}

function wine_patch_reg(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "run wine_patch_reg"
	[[ -z "$MNT_ALLWINESTORGE" ]] && echo "[wine_restore_prefix] ERROR:\$MNT_ALLWINESTORGE not set" >&2 && exit

	# I tried to disable autostart winedbg via loading the .reg by regedit but failed. therefore I use winetricks to disable autostart debugger.
	if [[ $MYAPPDEBUG -eq 1 ]];
	then
		winetricks autostart_winedbg=disabled
	else
		echo "[wine_patch_reg]: try to disable autostart_winedebug"
		winetricks autostart_winedbg=disabled >/dev/null 2>&1
	fi

	[[ -z "$(ls "$MNT_ALLWINESTORGE"/myapp_patch_reg/*.reg 2>/dev/null )" ]] && return
	for i in $(ls "$MNT_ALLWINESTORGE"/myapp_patch_reg/*.reg); do
		# ls /full/path/of/*.reg will output full path of file, need to use $(basename "$i") to get the file name.
		[[ -f $i ]] && i=$(basename "$i") || continue
		#"$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" regedit "d:\\myapp_patch_reg\\$i"
		"$HOME/$PROTON_DIR_FROM_HOME/proton" regedit "d:\\myapp_patch_reg\\$i"
	done

	[[ -z "$(ls "$MNT_ALLWINESTORGE"/myapp_patch_reg/$WINEARCH/*.reg 2>/dev/null )" ]] && return
	for i in $(ls "$MNT_ALLWINESTORGE"/myapp_patch_reg/$WINEARCH/*.reg); do
		# ls /full/path/of/*.reg will output full path of file, need to use $(basename "$i") to get the file name.
		[[ -f $i ]] && i=$(basename "$i") || continue
		#"$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" regedit "d:\\myapp_patch_reg\\$WINEARCH\\$i"
		"$HOME/$PROTON_DIR_FROM_HOME/proton" regedit "d:\\myapp_patch_reg\\$WINEARCH\\$i"
	done
}
##############################################


##############################################
function wine_run_winetricks(){
	wine_restore_prefix
	#"$APPDIR"/usr/bin/winetricks sandbox	# this command run too slow
	wine_patch_reg
	#wineboot -es	# this command run too slow
	#"$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" run wineboot -s
	"$HOME/$PROTON_DIR_FROM_HOME/proton" run wineboot -s
	if [[ $MYAPPDEBUG -eq 1 ]];
	then
		"$APPDIR"/usr/bin/winetricks "$@"
	else
		echo "exec winetricks"
		"$APPDIR"/usr/bin/winetricks "$@" >/dev/null 2>&1
	fi
}

function wine_run_exe(){
	wine_restore_prefix
	#"$APPDIR"/usr/bin/winetricks sandbox >/dev/null 2>&1	#NOTUSED: this command run too slow

	[[ $WALKTHROUGH_FLAG -eq 1 ]] && walkthrough_browser
	[[ $SAVEDATA_FLAG -eq 1 ]] && savedata_replace

	cd "$MNT_ALLWINESTORGE/$EXE_LDIR" || exit 2 # Use the app installed location. Some .exe may not run if not cd into excute directory

	wine_patch_reg

	#wineboot -es	# this command run too slow
	#"$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" run wineboot -s
	"$HOME/$PROTON_DIR_FROM_HOME/proton" run wineboot -s

	#"$APPDIR"/usr/bin/winetricks sandbox >/dev/null 2>&1 && wine "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@" 	# must use dos-style path instead of unix-style path if winetricks sandbox was set.
	if [[ $MYAPPDEBUG -eq 1 ]];
	then
		#"$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" run "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@"
		"$HOME/$PROTON_DIR_FROM_HOME/proton" run "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@"
	else
		#"$HOME/$PROTON_DIR_FROM_HOME/temprun.$WINEARCH.proton" run "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@" >/dev/null 2>&1
		"$HOME/$PROTON_DIR_FROM_HOME/proton" run "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@" >/dev/null 2>&1
	fi
}
##############################################


##############################################
[[ "$0" == "${BASH_SOURCE[0]}" && $MYAPPDEBUG -eq 1 ]] && wine_test_env
if [[ "$0" == "${BASH_SOURCE[0]}" ]];
then
	[[ -n $APPDIR ]] || echo "[AppRun:plugin_exeinfo] required \$APPDIR but it was not set"
	[[ -n $APPIMAGE_CACHE_DIR ]] || echo "[AppRun:plugin_exeinfo] required \$APPIMAGE_CACHE_DIR but it was not set"
	[[ -n $EXEINFO_GEN_METHOD ]] || echo "[AppRun:plugin_exeinfo] required \$EXEINFO_GEN_METHOD but it was not set"
	[[ -n $APPDIR || -n $APPIMAGE_CACHE_DIR || -n $EXEINFO_GEN_METHOD ]] || return
fi

##############################################



