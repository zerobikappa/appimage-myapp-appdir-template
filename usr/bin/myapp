#!/bin/bash

# AppRun Script version
# date -u +%s
MYAPPRUN_VERSION=1646653293

#############################################
## prevent running by root/sudo for security concern
if [[ $(id -u) -eq 0 ]];
then
	echo "[AppRun]: prevent running by root/sudo"
	echo "[AppRun]: you should not using root/sudo to run this application"
	exit
fi
#############################################


#############################################
function debug_print_env(){
	for i in "$@";
	do
		eval echo "\ \ \ \ $i=\$$i"
	done
}

if [[ "$MYAPPDEBUG" -eq 2 ]];
then
	# use bash debug + buildin debug info
	set -x
	MYAPPDEBUG=1
elif [[ "$MYAPPDEBUG" -eq 1 ]];
then
	# only use buildin debug info
	set +x
else
	# invalid value, reset to empty
	set +x
	unset MYAPPDEBUG
fi
#############################################


#############################################
## env settings
SELF=$(readlink -f "$0")
# moved script from HERE(AppDir) to HERE/usr/bin, therefore use $APPDIR to replace $HERE
#HERE=${SELF%/*}
[[ -z $APPDIR ]] && APPDIR=${SELF%/usr/bin/*}

# if you already install unionfs in your system, it should be newer version than that I bundled in appimage, prefer to use system unionfs
if [[ -x "$(command -v unionfs)" ]];
then
	UNIONFS_BIN="$(command -v unionfs)"
	[[ $MYAPPDEBUG -eq 1 ]] && debug_print_env UNIONFS_BIN
else
	UNIONFS_BIN="$APPDIR/usr/bin/unionfs"
	[[ $MYAPPDEBUG -eq 1 ]] && debug_print_env UNIONFS_BIN
fi

export PATH="${APPDIR}/usr/bin/:${APPDIR}/usr/sbin/:${APPDIR}/usr/games/:${APPDIR}/bin/:${APPDIR}/sbin/${PATH:+:$PATH}"
export LD_LIBRARY_PATH="${APPDIR}/usr/lib/:${APPDIR}/usr/lib/i386-linux-gnu/:${APPDIR}/usr/lib/x86_64-linux-gnu/:${APPDIR}/usr/lib32/:${APPDIR}/usr/lib64/:${APPDIR}/lib/:${APPDIR}/lib/i386-linux-gnu/:${APPDIR}/lib/x86_64-linux-gnu/:${APPDIR}/lib32/:${APPDIR}/lib64/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
export PYTHONPATH="${APPDIR}/usr/share/pyshared/${PYTHONPATH:+:$PYTHONPATH}"
# if XDG_DATA_DIRS is empyt, after add ${APPDIR}/user/share/ into XDG_DATA_DIRS, also need to manual add default data path, otherwise local zenity could not load data files.
#export XDG_DATA_DIRS="${APPDIR}/usr/share/${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}"
export XDG_DATA_DIRS="${APPDIR}/usr/share/${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}:/usr/local/share/:/usr/share/"
export PERLLIB="${APPDIR}/usr/share/perl5/:${APPDIR}/usr/lib/perl5/${PERLLIB:+:$PERLLIB}"
export GSETTINGS_SCHEMA_DIR="${APPDIR}/usr/share/glib-2.0/schemas/${GSETTINGS_SCHEMA_DIR:+:$GSETTINGS_SCHEMA_DIR}"
export QT_PLUGIN_PATH="${APPDIR}/usr/lib/qt4/plugins/:${APPDIR}/usr/lib/i386-linux-gnu/qt4/plugins/:${APPDIR}/usr/lib/x86_64-linux-gnu/qt4/plugins/:${APPDIR}/usr/lib32/qt4/plugins/:${APPDIR}/usr/lib64/qt4/plugins/:${APPDIR}/usr/lib/qt5/plugins/:${APPDIR}/usr/lib/i386-linux-gnu/qt5/plugins/:${APPDIR}/usr/lib/x86_64-linux-gnu/qt5/plugins/:${APPDIR}/usr/lib32/qt5/plugins/:${APPDIR}/usr/lib64/qt5/plugins/${QT_PLUGIN_PATH:+:$QT_PLUGIN_PATH}"
#EXEC=$(grep -e '^Exec=.*' "${APPDIR}"/*.desktop | head -n 1 | cut -d "=" -f 2 | cut -d " " -f 1)
#exec "${EXEC}" "$@"
#############################################


##############################################
## check *.cache directory

# if run directly from AppDir. 
if [[ -z ${APPIMAGE} ]];
then
	export APPIMAGE="$APPDIR"
fi

if [[ -d ${APPIMAGE}.cache ]];
then
	APPIMAGE_CACHE_DIR="${APPIMAGE}.cache"
else
	echo "directory  ${APPIMAGE}.cache/ not exist."
	echo "all data will be saved in /tmp/$(basename "$APPIMAGE").cache/ , which will be deleted after restart computer."
	echo "to keep your data, please run:"
	echo ""
	[[ -n $ARGV0 ]] && echo "  $ARGV0 --portable-cache" || echo "  ${APPIMAGE}/AppRun --portable-cache"
	echo ""
	echo "to create a cache directory."
	mkdir -p "/tmp/$(basename "$APPIMAGE").cache"
	APPIMAGE_CACHE_DIR="/tmp/$(basename "$APPIMAGE").cache"
fi
##############################################


##############################################
## setup unionfs temp directory for this app

RO_MYAPPSTORGE="$APPDIR/usr/share/myapp"

MNT_MYAPPSTORGE="/tmp/$(basename "$APPDIR").unionfs/usr/share/myapp"

TMP_MYAPPSTORGE_OVERLAY="$APPIMAGE_CACHE_DIR/usr/share/myapp"


RO_HOMESTORGE="/home/$USER/"

MNT_HOMESTORGE="/tmp/$(basename "$APPDIR").unionfs/home/public_user"

TMP_HOMESTORGE_OVERLAY="$APPIMAGE_CACHE_DIR/home/public_user"

# backup the path of $HOME because exeinfo-gen need to read the real $HOME instead of the fake one
HOME_REAL="$HOME"
HOME_FAKE="$MNT_HOMESTORGE"

##############################################


##############################################
## setup standalone $HOME and $XDG_CONFIG_HOME directory
## not redirect $HOME and $XDG_CONFIG_HOME at this moment because exeinfo plugin need original $HOME and $XDG_CONFIG_HOME env.

if [[ ! -d ${APPIMAGE_CACHE_DIR}/home/public_user/.config ]];
then
	mkdir -p "${APPIMAGE_CACHE_DIR}/home/public_user/.config"
fi

if [[ -d ${APPIMAGE}.home ]];
then
	echo "${APPIMAGE}.home exists but is not necessary."
	echo "Because we default to use $APPIMAGE_CACHE_DIR/home/public_user/ to save related files."
fi

if [[ -d ${APPIMAGE}.config ]];
then
	echo "${APPIMAGE}.config exists but is not necessary."
	echo "Because we default to use $APPIMAGE_CACHE_DIR/home/public_user/.config to save related files."
fi

##############################################


##############################################
## test runtime env
#function debug_show(){
#	cat << EOF
#APPIMAGE=$APPIMAGE
#APPDIR=$APPDIR
#OWD=$OWD
#ARGV0=$ARGV0
#\$0=$0
#EOF
#}
[[ $MYAPPDEBUG -eq 1 ]] && debug_print_env APPIMAGE APPDIR OWD ARGV0 0
##############################################


##############################################
function print_help(){
	cat << \EOF
run option:

  -s, --savedata
	load the full-completed savedata

  -w, --walkthrough
	open walkthrough with browser

  --browser=BROWSER_COMMAND
	only effect when -w is set.
	using another browser application to open
	walkthrough. for example, "--browser=firefox"
	means using firefox to open walkthrough.html

  -p, --portable-cache
	create ${APPIMAGE}.cache directory then exit.
	when running appimage, $HOME and $XDG_CONFIG_HOME
	will be redirect to this directory to prevent
	changing files in local $HOME.

  --proton
	default use local wine to run, but you can add
	this option to use local Steam Proton instead.
	if you install different version of Steam Proton,
	it will choose the latest stable version.
	if no stable version was found,
	it will try to use the experimental version.

  -h, --help
	show this help, then exit

  --version
	show application information and version, then exit


test option:

  -t, --test-winetricks
	open winetricks in temporary directory,
	use this option to test or install windows application.
	when this option set, -s and -w will be ignored.

  --exeinfo-gen [=gui|cli|zenity|kdialog]
		=gui :automatically find zenity or kdialog to run
		=cli :(only apply when launch from command line)
		=zenity :use zenity to run
		=kdialog :use kdialog to run
	after install windows application in AppDir,
	run "./AppRun --exeinfo-gen" to generate
	exeinfo_profile. default is "gui"


appimage option:

  --appimage-help
	show help about appimage function

  --appimage-extract [<pattern>]
	Extract content from embedded filesystem image
	If pattern is passed, only extract matching files

EOF
}

function print_version(){
	if [[ -d $APPIMAGE ]];
	then
		#APPIMAGEKIT_VERSION="AppImageKit Version: (empty)(directly running from AppDir)"
		echo "***AppImageKit Version***"
		echo "(empty)(directly running from AppDir)"
	else
		#APPIMAGEKIT_VERSION="AppImageKit $($APPIMAGE --appimage-version)"	#NOTUSED: printed out wrong format
		echo "***AppImageKit Version***"
		$APPIMAGE --appimage-version
	fi
	if [[ -f "$APPDIR"/usr/share/myapp/myapp_exeinfo/exeinfo_profile ]];
	then
		source "$APPDIR"/usr/share/myapp/myapp_exeinfo/exeinfo_profile
	fi
	[[ -z $EXENAME ]] && EXENAME="(empty)(not set in AppDir)"
	APPLICATION_NAME=$(cat "$APPDIR"/*.desktop | grep -i "name=") && APPLICATION_NAME=${APPLICATION_NAME#*"="}
	APPLICATION_DESCRIPTION=$(cat "$APPDIR"/*.desktop | grep -i "comment=") && APPLICATION_DESCRIPTION=${APPLICATION_DESCRIPTION#*"="}
	[[ -z $MYAPPLANG ]] && MYAPPLANG="(not set default language)"
	cat << EOF

  ***Application Info***
  AppRun script version: $MYAPPRUN_VERSION
  .exe name: $EXENAME
  application name: $APPLICATION_NAME
  application description: $APPLICATION_DESCRIPTION
  optional language:
      LANG=$MYAPPLANG(default)
EOF
	find "$APPDIR/usr/share/myapp/myapp_exeinfo" -mindepth 1 -maxdepth 1 -name "exeinfo_profile.*" -print0 | sort -z | while read -d $'\0' OPTIONAL_EXEINFO_PROFILE;
	do
		TEMP_KEY_WORD="$(cat "$OPTIONAL_EXEINFO_PROFILE" | grep '^[[:blank:]]*[^[:blank:]#]' | grep "MYAPPLANG=")"
		TEMP_KEY_WORD="${TEMP_KEY_WORD#*'MYAPPLANG='}"
		TEMP_KEY_WORD="${TEMP_KEY_WORD##\"}"
		TEMP_KEY_WORD="${TEMP_KEY_WORD%%\"}"
		[[ -z "$TEMP_KEY_WORD" ]] && continue
		echo '      LANG='"$TEMP_KEY_WORD"
	done
	unset TEMP_KEY_WORD
	echo ""
}
##############################################


##############################################
## option handling

#parameters=$(getopt -o swth --long save-data,walkthrough,browser:,test-winetricks,help -n "$0" -- "$@")	# NOTUSED: because $(getopt) cannot ignore unknown options

parameters=$(echo "$@"|tr "=" " ")
next_parameters=""
eval set -- "$parameters"

function option_check(){
	# do not place any debug output here, because this function use "echo" command to return result.

	if [[ ${1::2} == "--" ]];
	then
		echo "long"
	elif [[ ${1::1} == "-" ]];
	then
		echo "short"
	else
		echo "none"
	fi
}

while [[ -n "$1" ]] ; do
	case "$1" in
		-h| --help)
			print_help
			exit ;;
		--version)
			print_version
			exit ;;
		-s| --savedata)
			SAVEDATA_FLAG=1
			shift ;;
		-w| --walkthrough)
			WALKTHROUGH_FLAG=1
			shift ;;
		--browser)
			#i3-sensible-browser will choose $BROWSER to open walkthrough first
			[[ $(option_check "$2") != "none" ]] && echo "invalid option $1" >&2 && exit 1
			BROWSER="$2"
			shift 2;;
		-t| --test-winetricks)
			TEST_WINETRICKS_FLAG=1
			shift ;;
		--exeinfo-gen)
			EXEINFO_GEN_FLAG=1
			if [[ $2 == "zenity" ]];
			then
				EXEINFO_GEN_METHOD="zenity"
				shift 2
			elif [[ $2 == "kdialog" ]];
			then
				EXEINFO_GEN_METHOD="kdialog"
				shift 2
			elif [[ $2 == "gui" ]];
			then
				EXEINFO_GEN_METHOD="gui"
				shift 2
			elif [[ $2 == "cli" ]];
			then
				EXEINFO_GEN_METHOD="cli"
				shift 2
			else
				EXEINFO_GEN_METHOD="gui"
				shift
			fi
			;;
		-p| --portable-cache)
			mkdir -p "$APPIMAGE".cache/home/public_user/
			echo ""
			echo "created cache directory: $APPIMAGE.cache"
			exit ;;
		--proton)
			LOAD_PROTON=1
			shift ;;
		--)
			shift
			if [[ -z "$*" && -z "$next_parameters" ]];
			then
				break
			elif [[ ! $MYAPPDEBUG -eq 1 ]];
			then
				echo "[AppRun] error: not MYAPPDEBUG mode now. prevent to pass any unknown option." >&2
				echo "[AppRun] error: unknown options: $next_parameters $@" >&2
				exit
			else
				# then $next_parameters will be passed to wine
				[[ -z $next_parameters ]] && next_parameters="$@" || next_parameters="$next_parameters $@"
				shift $#
				break
			fi
			;;
		*)
			if [[ "$(option_check "$1")" == "short" && ${#1} -gt 2 ]];
			then
				parameters="$(getopt -o 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -n "$0" -- "$1")"
				parameters="${parameters%%' --'*}"
				shift
				parameters="$parameters $@"
				eval set -- "$parameters"
			elif [[ $MYAPPDEBUG -eq 1 ]];
			then
				[[ -z $next_parameters ]] && next_parameters="$1" || next_parameters="$next_parameters $1"
				shift
			else
				echo "[AppRun] error: not MYAPPDEBUG mode now. prevent to pass any unknow option." >&2
				echo "[AppRun] error: unknown options: $1" >&2
				exit
			fi
			;;
	esac
done

# as the case<...>esac statement set above, if you want to debug your appimage and make some unknown option/argument passthrough to wine, you can follow:
# set the env: MYAPPDEBUG=1 (otherwise it will prevent unknown option/argument passthrough)
# then all unused option will be passed to wine.
# you can also place "--" before your option to avoid my script catching your option. for example:
# ./yourappimagename -s    the "-s" option will be catched by my script to run "load savedata"
# ./yourappimagename -- -s    the "-s" option will pass to wine

[[ $MYAPPDEBUG -eq 1 ]] && debug_print_env next_parameters
# unused option/argument will be passed to wine
eval set -- "$next_parameters"

##############################################


##############################################
if [[ $LOAD_PROTON -eq 1 ]];
then
	source "$APPDIR"/usr/bin/myapp-plugin-proton
else
	source "$APPDIR"/usr/bin/myapp-plugin-wine
fi
wine_set_env
##############################################


##############################################
# I defined some function to generate .exe file name, path, and other information.
# I saved these function in below script file and load it as plugin
source "$APPDIR"/usr/bin/myapp-plugin-exeinfo

# load exeinfo_profile, may depends on $WINEARCH, (if savedata in c drive,) should set the $WINEARCH first
# it may also depends on $XDG_DOCUMENTS_DIR, if you add this env verb in exeinfo_profile
# should ensure the relevant variables were set
exeinfo_load_file
##############################################


##############################################
## extra filter for some option

if [[ -z $EXENAME ]];
then
	[[ ! $TEST_WINETRICKS_FLAG -eq 1 ]] && echo "EXENAME not found in config file. auto set --test-winetricks , redirect to launch winetricks"
	TEST_WINETRICKS_FLAG=1
	EXENAME="$APPDIR/usr/bin/winetricks"
fi

# if --exeinfo-gen or --test-winetricks is set, then -s and -w will be ignored.
if [[ $TEST_WINETRICKS_FLAG -eq 1 || $EXEINFO_GEN_FLAG -eq 1 ]];
then
	[[ $SAVEDATA_FLAG -eq 1 ]] && SAVEDATA_FLAG=0 && echo "--savedata option ignored"
	[[ $WALKTHROUGH_FLAG -eq 1 ]] && WALKTHROUGH_FLAG=0 && echo "--walkthrough option ignored"
fi

# if --exeinfo-gen is set, then -t will be ignored.
if [[ $EXEINFO_GEN_FLAG -eq 1 ]];
then
	[[ $TEST_WINETRICKS_FLAG -eq 1 ]] && TEST_WINETRICKS_FLAG=0 && echo "--test-winetricks option ignored"
fi
##############################################


##############################################
## mount unionfs
echo "[10%] mount unionfs"

# before setup unionfs temp directory, check if exe is already running
if [[ -n "$EXENAME" && -n "$(pgrep -fi "$EXENAME")" ]];
then 
	echo "seems $EXENAME has been launched and is still running, plsease kill the process if the application encountered error" >&2
	exit 1
fi

mkdir -p "$MNT_MYAPPSTORGE" "$TMP_MYAPPSTORGE_OVERLAY"
#$APPDIR/usr/bin/unionfs -o use_ino,nonempty,uid=$UID -ocow "$TMP_MYAPPSTORGE_OVERLAY"=RW:"$RO_MYAPPSTORGE"=RO "$MNT_MYAPPSTORGE" || exit 1
#"$APPDIR"/usr/bin/unionfs -o use_ino,auto_unmount,nonempty,uid=$UID -ocow "$TMP_MYAPPSTORGE_OVERLAY"=RW:"$RO_MYAPPSTORGE"=RO "$MNT_MYAPPSTORGE" || exit 1
"$UNIONFS_BIN" -o use_ino,auto_unmount,nonempty,uid=$UID -ocow "$TMP_MYAPPSTORGE_OVERLAY"=RW:"$RO_MYAPPSTORGE"=RO "$MNT_MYAPPSTORGE" || exit 1

mkdir -p "$MNT_HOMESTORGE" "$TMP_HOMESTORGE_OVERLAY"
#"$APPDIR"/usr/bin/unionfs -o use_ino,auto_unmount,nonempty,uid=$UID -ocow "$TMP_HOMESTORGE_OVERLAY"=RW:"$RO_HOMESTORGE"=RO "$MNT_HOMESTORGE" || exit 1
"$UNIONFS_BIN" -o use_ino,auto_unmount,nonempty,uid=$UID -ocow "$TMP_HOMESTORGE_OVERLAY"=RW:"$RO_HOMESTORGE"=RO "$MNT_HOMESTORGE" || exit 1

PID_MYAPPSTORGE="$(pgrep -a unionfs | grep "$MNT_MYAPPSTORGE" | awk '{print $1}')"
PID_HOMESTORGE="$(pgrep -a unionfs | grep "$MNT_HOMESTORGE" | awk '{print $1}')"
[[ $MYAPPDEBUG -eq 1 ]] && debug_print_env PID_MYAPPSTORGE PID_HOMESTORGE
##############################################


##############################################
## show the game walkthrough, you can see this info when using commandline to launch this app.
function walkthrough_browser(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "start >>>>>>>> [${FUNCNAME[0]}]"

	cat << EOF
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@
  you can also click below html file to show game walkthrough:
@
EOF

	for i in $(ls "$MNT_MYAPPSTORGE/myapp_walkthrough"/*.html);
	do
		#echo "  file://$MNT_MYAPPSTORGE/drive_d/myapp_walkthrough/$i"
		# ls will output the full path if run -> ls /full/path/to/file/*.html
		echo "  file://$i"
	done

	cat << EOF
@
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

EOF
	#TODO: failed to using xdg-open to open html file.
	i3-sensible-browser "$MNT_MYAPPSTORGE/myapp_walkthrough"/*.html

	[[ $MYAPPDEBUG -eq 1 ]] && echo "end <<<<<<<< [${FUNCNAME[0]}]"
}

##############################################


##############################################
## game savedata
function savedata_replace(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "start >>>>>>>> [${FUNCNAME[0]}]"

	HOME="$HOME_FAKE"
	exeinfo_user_dirs
	exeinfo_load_file
	if [[ $SAVEDATA_IN_HOME -eq 0 ]];
	then
		mkdir -p "$SAVEDATA_DIR"
		cp -r --suffix=.myapp."$USER".backup "$MNT_MYAPPSTORGE/myapp_savedata"/* "$SAVEDATA_DIR"
	elif [[ $SAVEDATA_IN_HOME -eq 1 ]];
	then
		mkdir -p "$SAVEDATA_DIR"
		cp -r --suffix=.myapp."$USER".backup "$MNT_MYAPPSTORGE/myapp_savedata"/* "$SAVEDATA_DIR"
	fi

	[[ $MYAPPDEBUG -eq 1 ]] && echo "end <<<<<<<< [${FUNCNAME[0]}]"
}

function savedata_restore(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "start >>>>>>>> [${FUNCNAME[0]}]"

	HOME="$HOME_FAKE"
	if [[ $SAVEDATA_IN_HOME -eq 0 ]];
	then
		FIND_DIR="$SAVEDATA_DIR"
	elif [[ $SAVEDATA_IN_HOME -eq 1 ]];
	then
		FIND_DIR="$SAVEDATA_DIR"
	else
		echo "[AppRun:savedata_restore] error: invalid FIND_DIR, cannot recover user savedata"
	fi

	echo "restore user savedata..."
	#SAVEDATA_RESTORE_LIST="$(find "$FIND_DIR" -type f -name "*.myapp.$USER.backup")"
	#for SAVEDATA_BACKUP in $SAVEDATA_RESTORE_LIST ; do	#NOT USED: could not handle filename with whitespace
	find "$FIND_DIR" -mindepth 1 -name "*.myapp.$USER.backup" -print0 | while read -d $'\0' SAVEDATA_BACKUP;
	do
		echo  "$SAVEDATA_BACKUP" ' >>to>> ' "${SAVEDATA_BACKUP%".myapp.$USER.backup"}"
		mv -f "$SAVEDATA_BACKUP" "${SAVEDATA_BACKUP%".myapp.$USER.backup"}"
	done

	[[ $MYAPPDEBUG -eq 1 ]] && echo "end <<<<<<<< [${FUNCNAME[0]}]"
}

function savedata_show_location(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "start >>>>>>>> [${FUNCNAME[0]}]"

cat << EOF
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@
@
  your savedata will be saved at file://$TMP_MYAPPSTORGE_OVERLAY/
@
@
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
EOF

	[[ $MYAPPDEBUG -eq 1 ]] && echo "end <<<<<<<< [${FUNCNAME[0]}]"
}

##############################################



##############################################
## test runtime env
function debug_show(){
	cat << EOF
ready.

HOME=$HOME
XDG_CONFIG_HOME=$XDG_CONFIG_HOME
APPIMAGE=$APPIMAGE
APPDIR=$APPDIR
OWD=$OWD
ARGV0=$ARGV0
EOF
}
##############################################


##############################################
## launch app

if [[ $EXEINFO_GEN_FLAG -eq 1 ]];
then
	# should use real $HOME to run
	# otherwise zenity/kdialog may output wrong path in file selection dialog
	HOME="$HOME_REAL" exeinfo_main

	# if I need to remove some file before end the program
	# I may forgot to change $HOME to fake home
	# it is better to switch to fake home immediately
	HOME="$HOME_FAKE"
fi


if [[ ! $EXEINFO_GEN_FLAG -eq 1 ]];
then
	[[ -n $MYAPPLANG ]] && LANG=$MYAPPLANG || echo "MYAPPLANG not set, using current LANG:$LANG"
	export HOME="$HOME_FAKE"
	export XDG_CONFIG_HOME="$HOME_FAKE/.config"
	debug_print_env "APPDIR" "PID_MYAPPSTORGE" "PID_HOMESTORGE" "HOME" "XDG_CONFIG_HOME" "WINEPREFIX"
	echo "*****using $WINEARCH"
	if [[ $TEST_WINETRICKS_FLAG -eq 1 ]];
	then
		wine_run_winetricks "$@"
	else
		wine_run_exe "$@"
	fi
fi


##############################################


##############################################
# monitor if the .exe is still running
# however, if the .exe file is only a launcher to launch other .exe files. pls change below code to monitor other the correct *.exe files.
function monitor_exe_running(){
	[[ $MYAPPDEBUG -eq 1 ]] && echo "start >>>>>>>> [${FUNCNAME[0]}]"

	# if you find the $EXENAME is only a launcher to launch other *.exe,
	# you can uncomment below line to change the $EXENAME to another name.

	#EXENAME="another name"		# uncomment this line if you need to monitor *.exe with another name.
	[[ -z "$EXENAME" ]] && return

	if [[ -n "$(pgrep -fi "$EXENAME")" ]];
	then
		echo "$(pgrep -fai "$EXENAME")" '-------- running'
	fi

	while true
	do
		sleep 5
		if [[ -z "$(pgrep -fi "$EXENAME")" ]];
		then
			echo "$EXENAME was ended"
			break	# the $EXENAME exe is no longer running
		fi
	done
	# some application will change the reg in wine.
	# if return out of this function directly without waiting wine shutdown,
	# unionfs drive will be unmount immediately.
	# therefore we can add a "wineboot" command to wait for wine saving the registry.
	if [[ ! $EXEINFO_GEN_FLAG -eq 1 ]];
	then
		#go back to $APPDIR, then remove temp file
		cd "$APPDIR" || exit 2
	
		if [[ $MYAPPDEBUG -eq 1 ]];
		then
			echo "[10%] restore wine drive symlink entries..."
			wine_restore_prefix
			echo "[30%] wait shutdown prefix..."
			wine_wait_shutdown
		else
			echo "[10%] restore wine drive symlink entries..."
			wine_restore_prefix >/dev/null 2>&1
			echo "[30%] wait shutdown prefix..."
			wine_wait_shutdown >/dev/null 2>&1
		fi
		[[ $SAVEDATA_FLAG -eq 1 ]] && savedata_restore
	fi

	[[ $MYAPPDEBUG -eq 1 ]] && echo "end <<<<<<<< [${FUNCNAME[0]}]"
}
[[ ! $EXEINFO_GEN_FLAG -eq 1 ]] && monitor_exe_running

##############################################


##############################################
## cleanup temp file

[[ ! $EXEINFO_GEN_FLAG -eq 1 ]] && savedata_show_location


function atexit() {
	[[ $MYAPPDEBUG -eq 1 ]] && echo "start >>>>>>>> [${FUNCNAME[0]}]"

	# "rm -rf" included, must check env first.
	[[ -z "$APPDIR" ]] && echo "[myapp:atexit] ERROR:\$APPDIR not set, could not clean temp files" >&2 && return
	[[ -z "$APPIMAGE_CACHE_DIR" ]] && echo "[myapp:atexit] ERROR:\$APPIMAGE_CACHE_DIR not set, could not clean temp files." >&2 && return

	echo "[40%] killing $APPDIR/usr/bin/unionfs"
	#killall "$APPDIR/usr/bin/unionfs"
	kill -9 $PID_MYAPPSTORGE
	kill -9 $PID_HOMESTORGE
	sleep 1
	echo "[70%] removing /tmp/$(basename "$APPDIR").unionfs"
	rm -rf "/tmp/$(basename "$APPDIR").unionfs"
	# if not clean up unionfs hide files, may encounter some read file error next time.
	echo "[90%] removing unionfs hidden files"
	rm -rf "$APPIMAGE_CACHE_DIR/usr/share/myapp"/.unionfs* >/dev/null 2>&1
	rm -rf "$APPIMAGE_CACHE_DIR/home/public_user"/.unionfs* >/dev/null 2>&1

	[[ $MYAPPDEBUG -eq 1 ]] && echo "end <<<<<<<< [${FUNCNAME[0]}]"
}
#set -e
#trap atexit EXIT	#NOT USED: due to some .exe(as game launcher) would pass EXIT signal after it completed to launch other .exe files. 
atexit
echo "[100%] ended"


##############################################


