#!/bin/bash

##############################################
## test env
function wine_test_env(){
	# these env should be passed to this script
	echo "[$(basename "${BASH_SOURCE[0]}")]: test env"
	echo "required:"
	debug_print_env APPDIR APPIMAGE_CACHE_DIR EXEINFO_GEN_METHOD
	echo "optional:"
	debug_print_env MYAPPDEBUG EXE_LDIR EXE_WROOT EXE_WDIR EXENAME SAVEDATA_IN_HOME SAVEDATA_DIR MYAPPLANG
}
##############################################


##############################################
## detect winetricks bin
function wine_detect_winetricks(){
	LOCAL_WINETRICKS_BIN=""
	APPIMAGE_WINETRICKS_BIN=""

	export PATH="$PATH_OLD"
	if [[ -x "$(command -v winetricks)" ]];
	then
		LOCAL_WINETRICKS_BIN="$(command -v winetricks)"
	fi
	export PATH="$PATH_NEW"

	if [[ -x "$APPDIR/usr/bin/winetricks" ]];
	then
		APPIMAGE_WINETRICKS_BIN="$APPDIR/usr/bin/winetricks"
	fi

	# both are not exist
	if [[ -z "$LOCAL_WINETRICKS_BIN" && -z "$APPIMAGE_WINETRICKS_BIN" ]];
	then
		echo "[$(basename "${BASH_SOURCE[0]}")] ERROR: command not found: winetricks"
		exit 1
	fi

	# only one of them is exist
	if [[ -z "$LOCAL_WINETRICKS_BIN" ]];
	then
		[[ -n "$APPIMAGE_WINETRICKS_BIN" ]] && WINETRICKS_BIN="$APPIMAGE_WINETRICKS_BIN"
	else
		[[ -z "$APPIMAGE_WINETRICKS_BIN" ]] && WINETRICKS_BIN="$LOCAL_WINETRICKS_BIN"
	fi

	# both are exist
	LOCAL_WINETRICKS_VERSION="$($LOCAL_WINETRICKS_BIN --version | awk '{print $1}')"
	APPIMAGE_WINETRICKS_VERSION="$($APPIMAGE_WINETRICKS_BIN --version | awk '{print $1}')"
	if [[ "$LOCAL_WINETRICKS_VERSION" > "$APPIMAGE_WINETRICKS_VERSION" ]];
	then
		WINETRICKS_BIN="$LOCAL_WINETRICKS_BIN"
	else
		WINETRICKS_BIN="$APPIMAGE_WINETRICKS_BIN"
	fi
}
##############################################


##############################################
## setup WINE env
function wine_set_env(){
	echo "start >>>>>>>> [${FUNCNAME[0]}]" >&3

	# default to run win64
	#zh# 默认用64位的wine
	if [[ "$WINEARCH" == "win32" || $(getconf LONG_BIT) -eq 32 ]];
	then
		export WINEARCH=win32
	else
		export WINEARCH=win64
	fi

	# default to prevent wine showing "fixeme" message.
	#zh# 默认不显示任何debug信息，对于普通用户来说这些信息太烦人了
	if [[ -z $WINEDEBUG ]];
	then
		export WINEDEBUG=-all
	fi

	# prevent wine setup application menu，no confirm if this setting was effected or not
	#zh# 安装软件进prefix时阻止程序建立开始菜单选项，不确定是否生效了，有待观察
	export WINEDLLOVERRIDES=winemenubuilder.exe=d

	#zh# 因为$WINEPREFIX路径包含挂载点，要先确保unionfs已经挂载了
	[[ -z "$MNT_MYAPPSTORGE" ]] && echo "[$(basename "${BASH_SOURCE[0]}"):${FUNCNAME[0]}] ERROR: \$MNT_MYAPPSTORGE not set" >&2 && exit
	export WINEPREFIX="$MNT_MYAPPSTORGE/myapp_prefix/wine.$WINEARCH/pfx"

	echo "end >>>>>>>> [${FUNCNAME[0]}]" >&3
}
##############################################


##############################################
## restore wine prefix, should ensure unionfs is mounted before run this function, because $WINEPREFIX path include the unionfs drive
function wine_restore_prefix(){
	echo "start >>>>>>>> [${FUNCNAME[0]}]" >&3

	#zh# 这个函数用来还原wineprefix

	#zh# 因为$WINEPREFIX路径包含挂载点，要先确保unionfs已经挂载了
	# "rm -rf" included, must check $WINEPREFIX first
	[[ -z "$WINEPREFIX" ]] && echo "[$(basename "${BASH_SOURCE[0]}"):${FUNCNAME[0]}] ERROR: \$WINEPREFIX not set, could not restore wine prefix." >&2 && exit 1

	mkdir -p "$MNT_MYAPPSTORGE/myapp_prefix/wine.$WINEARCH"
	[[ ! -d "$APPIMAGE_CACHE_DIR/usr/share/myapp/drive_d" ]] && mkdir -p "$APPIMAGE_CACHE_DIR/usr/share/myapp/drive_d"

	# only setup wineprefix and do nothing
	#zh# 只建立prefix，不做其他任何操作
	[[ ! -d $WINEPREFIX ]] && wine cmd /C exit >&3 2>&4

	# not necessary to update WINEPREFIX automatically every time
	echo "disable" > "$WINEPREFIX/.update-timestamp"

	# only keep C: and D: drive and remove other drive symlink, to prevent wine motifing local files through Z: drive
	# it is not necessary to package other drive symlink into appimage
	# however, wine will recreate other drive symlink every time when you open explorer in wine/winetricks, we should delete them again after game is ended
	#zh# 在这里我仅保留C盘和D盘，其它盘的软链接全删除了，避免wine透过Z盘(linux系统的根目录)对本地系统进行写入
	#zh# 是否真的有用还有待考察，就算删除了，只要在wine/winetricks里打开内置的文件管理窗，还是会重新生成，游戏结束后还要再删一次
	#zh# 不过删除多余盘符链接至少能避免打包一些不必要的东西进去appimage包里
	find "$WINEPREFIX/dosdevices" -mindepth 1 -maxdepth 1 ! -name "c:" ! -name "d:" ! -name "y:" -exec rm -rf "{}" \;
	[[ ! -L "$WINEPREFIX/dosdevices/c:" ]] && ln -sfn ../drive_c "$WINEPREFIX/dosdevices/c:"
	# D: drive is moved outside of $WINEPREFIX
	# you can feel free to delete your WINEPREFIX and just package D: drive into appimage
	#zh# 把D盘放在了WINEPREFIX的外面，只要游戏安装在D盘里，就算删除了WINEPREFIX也不需要重新安装游戏
	#zh# WINEPREFIX 应当根据不同电脑的wine版本当场生成，而不应打包进appimage包里
	[[ ! -L "$WINEPREFIX/dosdevices/d:" ]] && ln -sfn ../../../../drive_d "$WINEPREFIX/dosdevices/d:"
	#refer path: .../myapp/myapp_prefix/wine.win64/pfx/drive_c/myapp_patch_reg
	[[ ! -L "$MNT_MYAPPSTORGE/myapp_patch_reg" ]] && ln -sfn ../../../../myapp_patch_reg "$WINEPREFIX/drive_c/myapp_patch_reg"

	# Font directory is moved outside of $WINEPREFIX
	# this is a simple solution for font issue in japanese games
	# just place some CJK font in myapp_fonts directory and package it in appimage
	#zh# 把字体目录放在了WINEPREFIX的外面，如果有需要的话可以自己放一些必要的字体进去，不必担心WINEPREFIX被删除
	if [[ ! -L "$WINEPREFIX/drive_c/windows/Fonts" ]];
	then
		rm -rf "$WINEPREFIX/drive_c/windows/Fonts"
		#refer path: .../myapp/myapp_fonts
		#refer path: .../myapp/myapp_prefix/wine.win64/pfx/drive_c/windows/Fonts
		ln -sfnv ../../../../../myapp_fonts "$WINEPREFIX/drive_c/windows/Fonts"
	fi

	if [[ -d "$WINEPREFIX/drive_c/users/$USER/AppData/Roaming" && ! -L "$WINEPREFIX/drive_c/users/$USER/AppData/Roaming" ]];
	then
		mkdir -p "$MNT_HOMESTORGE/AppData"
		mv -f "$WINEPREFIX/drive_c/users/$USER/AppData/Roaming" "$MNT_HOMESTORGE/AppData"
		rm -rf "$WINEPREFIX/drive_c/users/$USER/AppData/Roaming"
	fi
	#refer path: .../myapp/myapp_fonts
	#refer path: .../myapp/myapp_prefix/wine.win64/pfx/drive_c/windows/Fonts
	ln -sfnv ../../../../../../../../../../home/public_user/AppData/Roaming "$WINEPREFIX/drive_c/users/$USER/AppData/Roaming"

	echo "end >>>>>>>> [${FUNCNAME[0]}]" >&3
}

function wine_wait_shutdown(){
	echo "start >>>>>>>> [${FUNCNAME[0]}]" >&3

	#wineboot -es	# this command run too slow
	#wineboot -s
	#zh# 原本的构想是用wineboot对wineprefix进行手动关机的操作。但感觉真的效果不佳，不确定是不是这个原因而导致下次启动的读写错误

	# to prevent launch the game too early(before complete reg patch)
	# or
	# to prevent unmount unionfs too early(before wine save changes)
	# wait until winserver terminate
	wineserver -w
	WINE_WINESERVER_EXIT=$?
	if [[ $WINE_WINESERVER_EXIT -ne 0 ]];
	then
		echo "[$(basename "${BASH_SOURCE[0]}"):${FUNCNAME[0]}] ERROR: wineserver did not shutdown normally. exit code=$WINE_WINESERVER_EXIT" >&2
		wineserver -k
		#NOTUSED: should not exit here. it may skip atexit() and let unionfs remain in background
		#exit
	fi
	unset WINE_WINESERVER_EXIT

	echo "end >>>>>>>> [${FUNCNAME[0]}]" >&3
}

function wine_patch_reg(){
	echo "start >>>>>>>> [${FUNCNAME[0]}]" >&3

	[[ -z "$MNT_MYAPPSTORGE" ]] && echo "[$(basename "${BASH_SOURCE[0]}"):${FUNCNAME[0]}] ERROR: \$MNT_MYAPPSTORGE not set" >&2 && exit

	# I tried to disable autostart winedbg via loading the .reg by regedit but failed.
	# as a workaround I use winetricks to disable autostart debugger.
	#zh# 程序遇到崩溃时winedbg默认自动开启，但开启winedbg的时候大部分情况下它就一直挂在那里既无法打开winedbg也无法按ctrl+c退出进程
	#zh# 禁用自动开启后，程序崩溃时它会先弹窗问你要不要开启winedbg窗口，选择不开启的话它就会跳过然后正常结束进程
	#zh# 我仍保留着导入注册表来更改这个设定，但好像不太行，"Auto"一栏一直都是"1"(崩溃时自动开启调试)，原因不明
	#zh# 所以这里暂时也通过winetricks来关闭自动调试
	# TODO: seems the imported reg were effected in wow6432node instead of the correct reg path
	#zh# TODO: 原来导入的注册表在wow6432node下的路径生效了，原因未知
	# update on 2022/3/25: No need to disable autostart_winedbg now because I fixed trap-exit function. Now I can easily use <Ctrl-C> to stop the process even when wine crash.
	#zh# 已经不用禁用了，我做好了trap-exit函数，应该可以用ctrl-c中断进程了
	#winetricks autostart_winedbg=disabled
	#"$WINETRICKS_BIN" autostart_winedbg=disabled >&3 2>&4

	#zh# 有些安装版的游戏会写入信息在注册表里，如果删除了WINEPREFIX，就算游戏文件还在也无法运行游戏
	#zh# 那么可以导出相关的注册表保存在 myapp_patch_reg 目录里，每次开启游戏时自动导入，这样就无需将WINEPREFIX也打包进appimage包里
	#zh# 由于文件编码不同，如果是日文游戏的话必须在日文的环境变量下(LANG=ja_JP.UTF-8)开启winetricks导出注册表，否则导出的注册表将无法正常使用
	if [[ -n "$(ls "$MNT_MYAPPSTORGE"/myapp_patch_reg/*.reg 2>/dev/null )" ]];
	then
		for i in $(ls "$MNT_MYAPPSTORGE"/myapp_patch_reg/*.reg); do
			# ls /full/path/of/*.reg will output full path of file, need to use $(basename "$i") to get the file name.
			[[ -f "$i" ]] && i=$(basename "$i") || continue
			wine regedit "c:\\myapp_patch_reg\\$i"
		done
	fi

	#zh# 如果32位和64位的注册表不一样，那么可以分开存放在 myapp_patch_reg/win32/ 和 myapp_patch/win64/ 里面
	if [[ -n "$(ls "$MNT_MYAPPSTORGE"/myapp_patch_reg/$WINEARCH/*.reg 2>/dev/null )" ]];
	then
		for i in $(ls "$MNT_MYAPPSTORGE"/myapp_patch_reg/$WINEARCH/*.reg); do
			# ls /full/path/of/*.reg will output full path of file, need to use $(basename "$i") to get the file name.
			[[ -f "$i" ]] && i=$(basename "$i") || continue
			wine regedit "c:\\myapp_patch_reg\\$WINEARCH\\$i"
		done
	fi

	echo "end >>>>>>>> [${FUNCNAME[0]}]" >&3
}
##############################################


##############################################
function wine_run_winetricks(){
	echo "start >>>>>>>> [${FUNCNAME[0]}]" >&3

	echo "[${FUNCNAME[0]}:20%] prepare prefix"
	# move the command to background then wait, so that I can use ctrl-C to interrupt wine if wine encounter crash
	wine_restore_prefix >&3 2>&4 &
	wait
	#"$APPDIR"/usr/bin/winetricks sandbox	# this command run too slow
	echo "[${FUNCNAME[0]}:60%] patch wine registry"
	wine_patch_reg >&3 2>&4 &
	wait
	echo "[${FUNCNAME[0]}:70%] restore completed, wait shutdown prefix"
	wine_wait_shutdown >&3 2>&4
	echo "[${FUNCNAME[0]}:100%] launch"
	#"$APPDIR"/usr/bin/winetricks "$@"
	"$WINETRICKS_BIN" "$@" >&3 2>&4

	echo "end >>>>>>>> [${FUNCNAME[0]}]" >&3
}

function wine_run_exe(){
	echo "start >>>>>>>> [${FUNCNAME[0]}]" >&3

	#zh# 除了因为有可能第一次运行游戏要生成WINEPREFIX之外，
	#zh# 还因为我重定向了D盘，所以无论如何都先重设一下WINEPREFIX，
	#zh# 确保一个正确的WINEPREFIX已经存在了
	echo "[${FUNCNAME[0]}:20%] prepare prefix"
	wine_restore_prefix >&3 2>&4 &
	wait
	#"$APPDIR"/usr/bin/winetricks sandbox >/dev/null 2>&1	#NOTUSED: this command run too slow
	#zh# 如果有注册表补丁就导入
	echo "[${FUNCNAME[0]}:60%] patch wine registry"
	wine_patch_reg >&3 2>&4 &
	wait
	#zh# 导入后进行一次wine关机的操作，这会等待上一步的注册表导入完成(效果有待考察)，
	#zh# 以防注册表还未写入就突然启动可执行文件，导致启动失败
	echo "[${FUNCNAME[0]}:70%] restore completed, wait shutdown prefix"
	wine_wait_shutdown >&3 2>&4

	if [[ $WALKTHROUGH_FLAG -eq 1 ]];
	then
		echo "[${FUNCNAME[0]}:80%] open walkthrough"
		walkthrough_browser
	fi

	if [[ $SAVEDATA_FLAG -eq 1 ]];
	then
		echo "[${FUNCNAME[0]}:90%] load full achieved savedata"
		savedata_replace
	fi

	#zh# 启动游戏前先cd到可执行文件的所在目录，否则有些.exe文件无法正常运行
	cd "$MNT_MYAPPSTORGE/$EXE_LDIR" || exit 2 # Use the app installed location. Some .exe may not run if not cd into excute directory

	#"$APPDIR"/usr/bin/winetricks sandbox >/dev/null 2>&1 && wine "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@" 	# must use dos-style path instead of unix-style path if winetricks sandbox was set.
	echo "[${FUNCNAME[0]}:100%] launch"
	#zh# 由于删除了C盘和D盘之外的所有链接，所以用DOS格式的路径传给wine
	wine "${EXE_WROOT}:\\${EXE_WDIR}\\$EXENAME" "$@" >&3 2>&4

	echo "end >>>>>>>> [${FUNCNAME[0]}]" >&3
}
##############################################


##############################################
[[ "$0" == "${BASH_SOURCE[0]}" && $MYAPPDEBUG -eq 1 ]] && wine_test_env
if [[ "$0" == "${BASH_SOURCE[0]}" ]];
then
	[[ -n $APPDIR ]] || echo "[$(basename "${BASH_SOURCE[0]}")] required \$APPDIR but it was not set" >&2
	[[ -n $APPIMAGE_CACHE_DIR ]] || echo "[$(basename "${BASH_SOURCE[0]}")] required \$APPIMAGE_CACHE_DIR but it was not set" >&2
	[[ -n $EXEINFO_GEN_METHOD ]] || echo "[$(basename "${BASH_SOURCE[0]}")] required \$EXEINFO_GEN_METHOD but it was not set" >&2
	[[ -n $APPDIR || -n $APPIMAGE_CACHE_DIR || -n $EXEINFO_GEN_METHOD ]] || exit
fi
wine_detect_winetricks

##############################################



